#include <iostream>
#include <vector>
#include <queue>
#include <algorithm>

using namespace std;
const int inf = 1e9;

int DIST(int a, int b, vector<vector<char>> const& map) {
    if (b < 0 || b > map.size() - 1 ||a < 0 || a > (map[0].size() - 1) || map[b][a] == '#') {
        return -1;
    }
    else if (map[b][a] == 'W') {
        return 2;
    }
    else return 1;
}
pair<int, int> first(int a, int b) {
    return {a - 1, b};
}
pair<int, int> second(int a, int b) {
    return {a, b - 1};
}
pair<int, int> third(int a, int b) {
    return {a + 1, b};

}
pair<int, int>fourth(int a, int b) {
    return {a, b + 1};
}

typedef pair<int, int> (*move_fn)(int, int);
move_fn fn[4] = {first, second, third, fourth};


struct Struct {
    int a, b;
    int distance;
    Struct(int a, int b, int distance) : a(a), b(b), distance(distance) {}
    friend bool operator < (Struct const& x, Struct const& y) {
        return x.distance > y.distance;
    }
};

int main() {
    int n;
    int m;
    int a_from;
    int b_from;
    int a_to;
    int b_to;
    cin >> n >> m >> b_from >> a_from >> b_to >> a_to;
    a_from--;
    b_from--;
    a_to--;
    b_to--;
    vector<vector<char>> map(n);
    vector<vector<int32_t>> dist(n, vector<int32_t>(m, inf));
    vector<vector<int32_t>> prev(n, vector<int32_t>(m, -1));
    for (auto& it : map) {
        string row;
        cin >> row;
        it = {row.data(), row.data() + row.size()};
    }
    priority_queue<Struct> q;
    vector<vector<pair<int, int>>> pairr(n, vector<pair<int, int>>(m, {-1, -1}));
    q.emplace(a_from, b_from, 0);
    dist[b_from][a_from] = 0;
    while (!q.empty()) {
        Struct cur = q.top();
        q.pop();
        if (cur.distance > dist[cur.b][cur.a]) {
            continue;
        }
        if (cur.a == a_to && cur.b == b_to) {
            break;
        }
        for (move_fn f: fn) {
            const pair<int, int> coord = f(cur.a, cur.b);
            int na = coord.first;
            int nb = coord.second;
            int len = DIST(na, nb, map);
            if (len > 0) {
                if (dist[nb][na] > dist[cur.b][cur.a] + len) {
                    dist[nb][na] = dist[cur.b][cur.a] + len;
                    pairr[nb][na] = {cur.a, cur.b};
                    q.emplace(na, nb, dist[nb][na]);
                }
            }
        }
    }
    if (dist[b_to][a_to] == inf) {
        cout << -1 << endl;
    } else {
        cout << dist[b_to][a_to] << endl;
        vector<pair<int, int>> path;
        pair<int, int> cur = {a_to, b_to};
        path.push_back(cur);
        while (pairr[cur.second][cur.first].first != -1 || pairr[cur.second][cur.first].second != -1) {
            cur = pairr[cur.second][cur.first];
            path.push_back(cur);
        }
        reverse(path.begin(), path.end());
        for (int i = 0; i < path.size() - 1; ++i) {
            if (path[i + 1].first == path[i].first + 1) {
                cout << "E";
            } else if (path[i + 1].first == path[i].first - 1) {
                cout << "W";
            } else if (path[i + 1].second == path[i].second + 1) {
                cout << "S";
            } else {
                cout << "N";
            }
        }
    }
    return 0;
}
