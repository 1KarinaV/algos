#include <iostream>
#include <unordered_set>
#include <vector>
#include <stack>
using namespace std;

int main() {
    string k;
    cin >> k;
    unordered_set<char> prev_set;
    stack<char> prev;
    stack<int> prev_lower;
    stack<int> prev_upper;
    vector<int> lower;
    lower.resize(k.size()/2);
    int indLow = 0;
    int indUpp = 0;
    int count = 0;
    
    for (int i = 0; i < k.size(); i++) {
        if (islower(k[i])) {
            if (prev_set.find(toupper(k[i])) != prev_set.end()) {
                if (prev.top() != toupper(k[i])) {
                    prev.push(k[i]);
                    prev_lower.push(indLow++);
                    prev_set.insert(k[i]);
                }
                else {
                    lower[prev_upper.top()] = indLow++;
                    prev_upper.pop();
                    prev.pop();
                    count++;
                }
            }
            else {
                prev.push(k[i]);
                prev_lower.push(indLow++);
                prev_set.insert(k[i]);
            }
        }
        else if (isupper(k[i])) {
            if (prev_set.find(tolower(k[i])) != prev_set.end()) {
                if (prev.top() != tolower(k[i])) {
                    prev.push(k[i]);
                    prev_upper.push(indUpp++);
                    prev_set.insert(k[i]);
                }
                else {
                    lower[indUpp++] = prev_lower.top();
                    prev_lower.pop();
                    prev.pop();
                    count++;
                }
            }
            else {
                prev.push(k[i]);
                prev_upper.push(indUpp++);
                prev_set.insert(k[i]);
            }
        }
    }
    if (count != k.size() / 2) {
        cout << "Impossible";
        return 0;
    }
    cout << "Possible" << endl;
    for (int i = 0; i < lower.size(); i++) {
        cout << lower[i] + 1 << " ";
    }
}
